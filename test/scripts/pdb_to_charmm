#!/usr/bin/python
# pdb_v3_to_v2 --- Converts a Phaistos PDB file to a Camshift 1.35
#                  compatible PDB file.
#
# Copyright (C) 2011 Anders Steen Christensen
#
# This file is part of Phaistos
#
# Phaistos is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Phaistos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Phaistos.  If not, see <http://www.gnu.org/licenses/>.

import string
import sys

# Easily cut a series of characters from a string
def cut_string(string, begin, end):

    # Initialize the fragment
    fragment = ""

    # Make sure that last character is inside 
    # the string
    if end > len(string):
        end = len(string)

    # Assemble string   
    for i in range(begin, end+1):
        fragment = fragment + string[i-1]

    return fragment

# Translation map between PDB V2 and V3 
# Format: ["RES", [[" V2 ", " V3 "]]]
# Not complete, but covers *most* cases.
names = [
# ALL = Common to all res types
["ALL", [[" HN ", " H  "],
         [" HT1", " H1 "],
         [" HT2", " H2 "],
         [" HT3", " H3 "]]],

["ALA", [["HB1 ", " HB1"],
         ["HB2 ", " HB2"],
         ["HB3 ", " HB3"]]],  

["GLY", [["HA1 ", " HA2"],
         ["HA2 ", " HA3"]]], 
              
["SER", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HG1 ", " HG "]]],

["THR", [["HG23", "HG23"],
         ["HG22", "HG22"],
         ["HG21", "HG21"]]],

["CYS", [["HG1 ", " HG "],
         ["HB1 ", " HB2"],
         ["HB2 ", " HB3"]]],  
    
    
["VAL", [["HG11", "HG11"],
         ["HG12", "HG12"],
         ["HG13", "HG13"],
         ["HG21", "HG21"],
         ["HG22", "HG22"],
         ["HG23", "HG23"]]], 
               
["LEU", [["HD11", "HD11"],
         ["HD12", "HD12"],
         ["HD13", "HD13"], 
         ["HD21", "HD21"],
         ["HD22", "HD22"],
         ["HD23", "HD23"],
         ["HB1 ", " HB2"], 
         ["HB2 ", " HB3"]]], 
              
["ILE", [["HD1 ", "HD11"],
         ["HD2 ", "HD12"],
         ["HD3 ", "HD13"],
         ["HG11", "HG12"],
         ["HG12", "HG13"],
         ["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         [" CD ", " CD1"]]],


["MET", [["HE1 ", " HE1"],
         ["HE2 ", " HE2"],
         ["HE3 ", " HE3"],
         # ["HG1 ", " HG2"],
         ["HG1 ", " HG3"],
         ["HB1 ", " HB3"],
         ["HB1 ", "HB3 "]
         
         ]], 
            
["PRO", [["HB1 ", " HB2"], 
         ["HB2 ", " HB3"],
         ["HG1 ", " HG2"],
         ["HG2 ", " HG3"],
         ["HD1 ", " HD2"],
         ["HD2 ", " HD3"]]],
            
["PHE", [["HB1 ", " HB2"],
        ["HB2 ", " HB3"]]],
            
["TYR", [["HB1 ", " HB2"],
        ["HB2 ", " HB3"]]],
            
["TRP", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"]]],
            
["ASP", [["HB1 ", " HB2"],
        ["HB2 ", " HB3"]]],
            
["GLU", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HG1 ", " HG2"],
         ["HG2 ", " HG3"]]],
            
["ASN", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HD21", "HD21"],
         ["HD22", "HD22"]]],
             
["GLN", [["HE21", "HE21"],
         ["HE22", "HE22"],
         ["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HG1 ", " HG2"],
         ["HG2 ", " HG3"]]],
            
["HIS", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HD1 ", " HD1"],
         ["HD2 ", " HD2"]]], 
            
["LYS", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HG1 ", " HG2"],
         ["HG2 ", " HG3"],
         ["HD1 ", " HD2"],
         ["HD2 ", " HD3"],
         ["HE1 ", " HE2"],
         ["HE2 ", " HE3"],
         ["HZ3 ", " HZ3"],
         ["HZ2 ", " HZ2"],
         ["HZ1 ", " HZ1"]]], 
            
["ARG", [["HB1 ", " HB2"],
         ["HB2 ", " HB3"],
         ["HG1 ", " HG2"],
         ["HG2 ", " HG3"],
         ["HD1 ", " HD2"],
         ["HD2 ", " HD3"],
         ["HH11", "HH11"],
         ["HH12", "HH12"],
         ["HH21", "HH21"],
         ["HH22", "HH22"]]]
]

# From the residue name and PDB V3 name
# the correct PDB V2 name is returned.
def get_v2_names(atom_name, residue_name):


    # Check residue specific names
    for residue_type in names:
        if residue_name == residue_type[0]:
            for atom_type in residue_type[1]:
                if atom_type[1] == atom_name:
                    if debug: print "Found matching atom_name!"
                    atom_name =  atom_type[0]

    # Check for generic atom types
    for atom_type in names[0][1]:
        if atom_type[1] == atom_name:
            if debug: print "Found matching atom_name!"
            atom_name =  atom_type[0]

    return atom_name



# Get filename from command line
if (len(sys.argv) != 2):
    if  (len(sys.argv) > 2):
        print "Too many arguments!"
        print "Usage: $ ./pdb_v3_to_v2 phaistosfile.pdb [> camshiftfile.pdb]"
    exit()

filename = sys.argv[1]

# Enable debug mode by setting this to True
debug = False

# Test if file exists
try:
        file_open = open(filename)
except IOError as e:
        print "Could not open file: ", filename

file_text = file_open.readlines() 


#Determine last residue name (for detecting O -> OT1 conversion)
last_residue_number = 0

for line in file_text:

    if line[:4] != "ATOM":
        continue

    residue_number = int(cut_string(line, 24, 26))

    if residue_number > last_residue_number:
        last_residue_number = residue_number

# Read lines from input file, convert and print to std.out.

# First find N in residue 1.
for line in file_text:

    if line[:4] != "ATOM":
        continue

    # Read information from lines
    atom_number = cut_string(line, 1, 12)
    atom_name = cut_string(line, 13, 16)
    residue_name = cut_string(line, 18, 20)
    residue_number = int(cut_string(line, 24, 26))
    rest = cut_string(line, 21, 1000)

    #Convert name
    atom_name = get_v2_names(atom_name, residue_name)

    # print "REMARK -" + atom_name + "-"
    if ((residue_number == 1)
        and (atom_name == " N  ")):

        # Print the line
        print "ATOM      1 "  + atom_name + " "+ residue_name + rest,

atom_id = 2

found_ser_hn = False
# Read lines from input file, convert and print to std.out.
for line in file_text:

    if line[:4] != "ATOM":
        continue


    # Read information from lines
    #atom_number = cut_string(line, 1, 12)
    atom_number = "ATOM  %5d " % (atom_id)
    atom_name = cut_string(line, 13, 16)
    residue_name = cut_string(line, 18, 20)
    residue_number = int(cut_string(line, 24, 26))
    rest = cut_string(line, 21, 1000)

    if ((residue_number == 1)
         and (atom_name == " N  ")):
         continue

    atom_id += 1

    #Convert name
    atom_name = get_v2_names(atom_name, residue_name)

    # print "REMARK -" + atom_name + "-"
    if ((residue_number == last_residue_number)
        and (atom_name == " O  ")):
        atom_name = " OT1"

    if ((residue_number == last_residue_number)
        and ("OXT" in atom_name)):
        atom_name = " OT2"

    # if (("SER" in residue_name)
    #     and (atom_name == " HN ")):

    #     if found_ser_hn:
    #         atom_name = " HG1"
    #         found_ser_hn = False
    #     else:
    #         found_ser_hn = True

    if ("HIS" == residue_name):
        residue_name = "HSP"

    # Print the shebang
    print atom_number + atom_name + " "+ residue_name + rest,

atom_id = int(string.split(atom_number)[1])
print "TER   %5d      " % (atom_id + 1) + "   %6d" % (residue_number)
print "END"

